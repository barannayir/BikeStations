@using Newtonsoft.Json
@model IEnumerable<BikeStationsMvc.Data.Bike>

@{
    ViewData["Title"] = "List";
}
<div id="container"></div>
<div class="search">
<input type="text" id="searchInput" placeholder="Search for bike name or station name">
    <button id="searchButton" onclick="search()">Search</button>
</div>

<div id ="search" style="display:none">
    <table class="table table-striped table-hover table-bordered">
    <thead>
        <tr>
            <th>Bike Id</th>
            <th>Station Id</th>
            <th>Name</th>
            <th>Longitude</th>
            <th>Latitude</th>
            <th>Is Reserved</th>
            <th>Is Disabled</th>
        </tr>
    </thead>
    <tbody id ="filtered">
       
    </tbody>
</table>
</div>

<div id="jsonData">
    <table class="table table-striped table-hover table-bordered">
    <thead>
        <tr>
            <th>Bike Id</th>
            <th>Station Id</th>
            <th>Name</th>
            <th>Longitude</th>
            <th>Latitude</th>
            <th>Is Reserved</th>
            <th>Is Disabled</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: bikes">
        <tr>
            <td data-bind="text: bike_id"></td>
            <td data-bind="text: station_id"></td>
            <td data-bind="text: name"></td>
            <td data-bind="text: lon"></td>
            <td data-bind="text: lat"></td>
            <td data-bind="text: is_reserved"></td>
            <td data-bind="text: is_disabled"></td>
        </tr>
    </tbody>
</table>
</div>
<script src="~/js/jslinq.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.0/knockout-min.js"></script>
<script>
  
</script>
<script>
    var bikes = @Html.Raw(JsonConvert.SerializeObject(Model));
        var chartData = [];
var stationCount = {};
for (var i = 0; i < bikes.length; i++) {
    var stationId = bikes[i].station_id;
    if (stationCount[stationId]) {
        stationCount[stationId]++;
    } else {
        stationCount[stationId] = 1;
    }
}

for (var stationId in stationCount) {
        if (stationId != null && stationId != "")
        {
    chartData.push({
        name: stationId,
        y: stationCount[stationId]
    });
        }
}
console.log(chartData);
    Highcharts.chart('container', {
        chart: {
            type: 'column'
        },
        title: {
            text: 'Bisiklet İstasyonlarına Göre Bisiklet Yoğunluğu'
        },
        xAxis: {
            categories: Object.keys( GroupBy(bikes, 'station_id')),
            title: {
                text: 'İstasyonlar'
            }
        },
        yAxis: {
            min: 0,
            title: {
                text: 'Bisiklet Sayısı'
            }
        },
        series: [{
            name: 'Bisiklet Sayısı',
            data: chartData
        }]
    });




    function GroupBy(arr, key) {
    var group = {};

    arr.forEach(val => group[val[key]] = (group[val[key]] || 0) + 1);

    return group;
}
    


var group = GroupBy(bikes, 'station_id');
console.log(group);

    var viewModel = {
        bikes: ko.observableArray(@Html.Raw(JsonConvert.SerializeObject(Model)))
    };
    ko.applyBindings(viewModel);


      function search() {
        //get search input value
        var searchValue = document.getElementById("searchInput").value;
     
        //perform search operation using jslinq
        var bikes = @Html.Raw(JsonConvert.SerializeObject(Model));
        var filteredData = jslinq(bikes).where(function (item) {
            return item.name.toLowerCase().includes(searchValue.toLowerCase()) ||
                item.station_id.toLowerCase().includes(searchValue.toLowerCase());
        });

        //update view with filtered data
        updateView(filteredData);
    }

    function updateView(data){
        if(data != null && data != ""){
            document.getElementById("filtered").textContent = "";
            document.getElementById("jsonData").style.display = "none";
            document.getElementById("search").style.display = "block";
            console.log(data.items);
            data.items.forEach(function(item){
                var tr = document.createElement("tr");
                document.getElementById("filtered").appendChild(tr);

                var tdBikeId = document.createElement("td");
                tdBikeId.innerHTML = item.bike_id;
                tr.appendChild(tdBikeId);

                var tdStationId = document.createElement("td");
                tdStationId.innerHTML = item.station_id;
                tr.appendChild(tdStationId);

                var tdName = document.createElement("td");
                tdName.innerHTML = item.name;
                tr.appendChild(tdName);

                var tdLongitude = document.createElement("td");
                tdLongitude.innerHTML = item.lon;
                tr.appendChild(tdLongitude); 
                
                var tdLatitude = document.createElement("td");
                tdLatitude.innerHTML = item.lat;
                tr.appendChild(tdLatitude);

                var tdIsReserved = document.createElement("td");
                tdIsReserved.innerHTML = item.is_reserved;
                tr.appendChild(tdIsReserved);

                var tdIsDisabled = document.createElement("td");
                tdIsDisabled.innerHTML = item.is_disabled;
                tr.appendChild(tdIsDisabled);
            }
            );
        }
    }
</script>